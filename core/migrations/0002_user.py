# Generated by Django 3.0.5 on 2020-05-30 20:18

import os
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone

def forwards_func(apps, schema_editor):
    apps.get_model('contenttypes', 'ContentType').objects.filter(app_label="auth", model="user").update(app_label="core")

def backwards_func(apps, schema_editor):
    apps.get_model('contenttypes', 'ContentType').objects.filter(app_label="core", model="user").update(app_label="auth")


class Migration(migrations.Migration):
    initial = False

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunPython(code=forwards_func, reverse_code=backwards_func),
            ],
            state_operations=[
                migrations.CreateModel(
                    name='User',
                    fields=[
                        ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('password', models.CharField(max_length=128, verbose_name='password')),
                        ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                        ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                        ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                        ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                        ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                        ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                        ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                        ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                        ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                        ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                        ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
                    ],
                    options={
                        'db_table': 'auth_user',
                    },
                    managers=[
                        ('objects', django.contrib.auth.models.UserManager()),
                    ],
                ),
            ],
        )
    ]
